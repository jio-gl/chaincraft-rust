#!/bin/bash

# ChainCraft Rust Release Preparation Script
# This script runs all the necessary checks before a release

set -e

echo "üöÄ Preparing ChainCraft Rust for release..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}‚úì${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}‚ö†${NC} $1"
}

print_error() {
    echo -e "${RED}‚úó${NC} $1"
}

# Check if we're in the right directory
if [ ! -f "Cargo.toml" ]; then
    print_error "This script must be run from the rust-port directory"
    exit 1
fi

# Get version from Cargo.toml
VERSION=$(grep '^version =' Cargo.toml | sed 's/.*"\(.*\)".*/\1/')
echo "Preparing release for version: $VERSION"

# Check if VERSION is provided as argument
if [ "$1" != "" ]; then
    if [ "$1" != "$VERSION" ]; then
        print_warning "Version mismatch: Cargo.toml has $VERSION but you specified $1"
        echo "Do you want to update Cargo.toml to version $1? (y/N)"
        read -r response
        if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
            sed -i.bak "s/version = \"$VERSION\"/version = \"$1\"/" Cargo.toml
            VERSION=$1
            print_status "Updated Cargo.toml to version $VERSION"
        else
            print_error "Aborted due to version mismatch"
            exit 1
        fi
    fi
fi

echo ""
echo "Running pre-release checks..."

# Check formatting
echo "üìù Checking code formatting..."
if ! cargo fmt --check; then
    echo "‚úó Code formatting issues found. Run 'cargo fmt' to fix."
    exit 1
fi
echo "‚úì Code formatting is correct"

# Run clippy
echo "üîç Running Clippy..."
if ! RUSTFLAGS="-A unused-variables -A dead-code -A clippy::assertions-on-constants" cargo clippy; then
    echo "‚úó Clippy found issues"
    exit 1
fi
echo "‚úì Clippy checks passed"

# Run tests
echo "üß™ Running tests..."
if ! cargo test; then
    echo "‚úó Tests failed"
    exit 1
fi
echo "‚úì All tests passed"

# Run doc tests
echo "üìö Building documentation..."
if ! cargo doc --no-deps; then
    echo "‚úó Documentation build failed"
    exit 1
fi
echo "‚úì Documentation built successfully"

# Publish check (dry run)
echo "üì¶ Verifying package for publishing..."
if ! cargo publish --dry-run; then
    echo "‚úó Package verification failed"
    exit 1
fi
echo "‚úì Package verified for publishing"

echo ""
echo "üéâ All checks passed! Ready for release $VERSION"
echo ""
echo "Next steps:"
echo "1. Commit any remaining changes: git add . && git commit -m \"Prepare release $VERSION\""
echo "2. Create and push tag: git tag v$VERSION && git push origin v$VERSION"
echo "3. Create a GitHub release at: https://github.com/chaincraft-org/chaincraft-rust/releases/new"
echo "4. The GitHub Actions will automatically publish to crates.io"
echo ""
echo "Release checklist:"
echo "‚ñ° Tag created and pushed"
echo "‚ñ° GitHub release created with changelog"
echo "‚ñ° Crates.io publish successful"
echo "‚ñ° Documentation updated on docs.rs"
echo "‚ñ° Announcement prepared"

exit 0 